{"ast":null,"code":"var _jsxFileName = \"D:\\\\Website\\\\NoteApp\\\\frontend\\\\src\\\\pages\\\\NotePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { ReactComponent as LeftArrow } from \"../assets/LeftArrow.svg\";\nimport AuthContext from '../context/AuthContext';\nimport API from '../ultis/API';\nimport '../styles/NotePage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NotePage = () => {\n  _s();\n\n  const {\n    noteID\n  } = useParams();\n  const [note, setNote] = useState(null);\n  const {\n    user\n  } = useContext(AuthContext);\n  const history = useNavigate();\n  useEffect(() => {\n    getNote();\n  }, []);\n\n  let getNote = async () => {\n    if (noteID === \"new\") return;\n\n    try {\n      let resp = await API.get(`note/${noteID}/`);\n      setNote(resp.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const updateNote = async () => {\n    await API.put(`note/${noteID}/`, {\n      user: note.user,\n      body: note.body\n    });\n  };\n\n  const deleteNote = async () => {\n    await API.delete(`note/${noteID}/`);\n  };\n\n  const createNote = async () => {\n    await API.post(`notes/`, {\n      user: user.user_id,\n      body: note.body\n    });\n  };\n\n  const handleSubmit = () => {\n    if (noteID !== \"new\" && note.body !== \"\") {\n      updateNote();\n    } else if (noteID !== \"new\" && note.body === \"\") {\n      deleteNote();\n    } else if (noteID === \"new\" && note !== null && note) {\n      createNote();\n    }\n\n    history(`/`);\n  };\n\n  const handleChange = value => {\n    setNote(note => ({ ...note,\n      body: value\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(LeftArrow, {\n          onClick: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: e => {\n        handleChange(e.target.value);\n      },\n      value: note === null || note === void 0 ? void 0 : note.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NotePage, \"/X67CmruK/EeyqvX4DfavdqUbYM=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = NotePage;\nexport default NotePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useParams","useNavigate","ReactComponent","LeftArrow","AuthContext","API","NotePage","noteID","note","setNote","user","history","getNote","resp","get","data","error","console","log","updateNote","put","body","deleteNote","delete","createNote","post","user_id","handleSubmit","handleChange","value","e","target"],"sources":["D:/Website/NoteApp/frontend/src/pages/NotePage.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { ReactComponent as LeftArrow } from \"../assets/LeftArrow.svg\";\r\nimport AuthContext from '../context/AuthContext'\r\nimport API from '../ultis/API'\r\nimport '../styles/NotePage.css'\r\nconst NotePage = () => {\r\n  const { noteID } = useParams();\r\n  const [note, setNote] = useState(null);\r\n  const {user} = useContext(AuthContext)\r\n  const history = useNavigate();\r\n  useEffect(() => {\r\n    getNote();\r\n  }, []);\r\n\r\n  let getNote = async () => {\r\n    if (noteID === \"new\") return;\r\n    try{\r\n      let resp = await API.get(`note/${noteID}/`)\r\n      setNote(resp.data)\r\n    }catch(error){\r\n      console.log(error)\r\n    }\r\n  };\r\n\r\n  const updateNote = async () => {\r\n    await API.put(`note/${noteID}/`,{\r\n      user:note.user,\r\n      body:note.body\r\n    })\r\n  };\r\n\r\n  const deleteNote = async () => {\r\n    await API.delete(`note/${noteID}/`)\r\n\r\n  };\r\n\r\n  const createNote = async ()=>{\r\n    await API.post(`notes/`,{\r\n      user:user.user_id,\r\n      body:note.body\r\n    })\r\n  }\r\n  const handleSubmit = () => {\r\n    if (noteID !== \"new\" && note.body !== \"\") {\r\n      updateNote();\r\n    } else if (noteID !== \"new\" && note.body === \"\") {\r\n      deleteNote();\r\n    } else if (noteID === \"new\" && note !== null &&note) {\r\n      createNote();\r\n    }\r\n    history(`/`);\r\n  };\r\n\r\n  const handleChange = (value) => {\r\n    setNote((note) => ({ ...note, body: value }));\r\n    \r\n  };\r\n  return (\r\n    <div className=\"note\">\r\n      <div className=\"note-header\">\r\n        <h3>\r\n          <LeftArrow onClick={handleSubmit} />\r\n        </h3>\r\n        {/* {noteID !== \"new\" ? (\r\n          <button onClick={deleteTask}>Delete</button>\r\n        ) : (\r\n          <button onClick={handleSubmit}>Done</button>\r\n        )} */}\r\n      </div>\r\n      <textarea\r\n        onChange={(e) => {\r\n          handleChange(e.target.value);\r\n        }}\r\n        value={note?.body}\r\n      ></textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotePage;"],"mappings":"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"},"metadata":{},"sourceType":"module"}